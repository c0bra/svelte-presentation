---
title: Svelte Lunch & Learn
pdf: svelte-lunch-and-learn.pdf
slideNumber: true
controls: true
---

# 

<img src="assets/svelte.svg" alt="logo" width="200"/> (v3)

A magically disappearing framework

# A compiler, not a runtime

```html
<!-- App.html -->
<h1>Hello {name}!</h1>
```

|
|

<small>Turns into Vanilla JS in the browser</small>


# Runtimes live in your browser

* Angular, React, Vue
* Interpret your code at runtime


# Compilers live in your dev env

* Turn your apps and components into plain JS
* Work as part of your build flow (webpack, rollup, parcel)


# Why compile?


# Runtimes are big

> Svelte's Todo MVC weighs 3.6kb zipped. For comparison, React plus ReactDOM without any app code weighs about 45kb zipped


# Runtimes provide unnecessary code

* Difficult to tree-shake all of React
* Better to remove dead code or just don't generate it?


# Runtimes are slow 

![](assets/svelte-benchmarks2.jpg)


# Runtimes lock you in

No runtime means code can be re-used in any framework, or no framework.

|
|

Re-using Vue in React or vice-versa requires jumping through hoops. Don't even think about Angular.


# How do you write Svelte?

Components are done in a single file, like Vue or React.

```html
<!-- Greeting.html -->
<h1>Hi, {name}, I'm your component!</h1>

<script>
  export let name = 'Bob';
</script>

<style>
  h1 {
    color: blue;
  }
</style>
```


# How do you use Svelte components?


```js
const greet = new Greeting({
  target: document.body,
  props: {
    name: 'Fred',
  },
});

// Plain prop accessors
greet.name = 'Bobby';

// Set multiple props
greet.$set({ name: 'Jimmy' });
```


# How you do you build with components?

```html
<!-- App.html -->
<div>
  <Greeting name={name}></Greeting>
</div>

<script>
  import Greeting from './Greeting.html';

  let name = 'Randall';
</script>
```
# HTML Syntax

# Interpolated Tags

```html
<div>{name}</div>

<div>{Math.floor(counter / 2)}</div>

<div style="color: {color}">Foo</div>

<div hidden={isHidden}>Bar</div>

<div {hidden}>Maybe I'm hidden</div>
```


# Logic

```html
<div>
  {#if counter > 0}
    More than zero
  {:elseif counter < 0}
    Less than zero
  {:else}
    Zero
  {/if}
</div>
```


# Loops

```html
<ul>
  <!-- Destructure loop variables -->
  {#each developers as {name, location}, i}
    <li>{i} - {name}, {location}</li>
  {:else}
    <li>No developers!</li>
  {/each}
</ul>
```


# Async

```html
<script>
  let promise = fetch('https://reqres.in/api/users')
    .then(res => res.json())
    .then(res => res.data);
</script>

<div>
  {#await promise}
    Fetching...
  {:then users}
    {#each users as {name}} {name} {/each}
  {:catch error}
    <p>Couldn't fetch users: {error}</p>
  {/await}
</div>
```


# Directives

`x:y` - Event handlers, bindings, transitions

```html
<button on:click="{() => counter += 1}">+1</button>

<!-- Two-way binding -->
<input bind:value={name}>

<!-- Attribute binding -->
<span class:active={isActive}>Am I active?</span>

<!-- Bring element into js -->
<canvas bind:this={canvas}></canvas>
```


# Special elements

* `<svelte:self>` recursion
* `<svelte:component>` dynamic components
* `<svelte:window>` window event listeners
* `<svelte:body>` similar
* `<svelte:head>` title element, etc


# Transclusion with `<slot>`

```html
<!-- Box.html -->
<div>
  <slot></slot>

  <small><slot name="comment"></slot></small>
</div>
```

```html
<Box>
  Box content here

  <span slot="comment">Comment here</span>
</Box>

<script>
  import Box from './Box.html';
</script>
```


# Styles


# Scoped CSS

Styles are scoped by default

```html
<style>
  .red {
    color: red
  }
</style>
```

becomes

```css
.red.svelte-1xi0wsh {
  color:red
}
```


# :global()

Modifier makes classes global

```html
<style>
  .user :global(p) {
    font-size: 2rem;
  }
</style>
```


# Unused styles

Removed automatically! âœ¨

# State managemenet


# Internal state

```html
<script>
  // count is available internal
	let count = 0;
</script>

<div>{count}</div>
```


# External props

```html
<!-- Counter.html -->
<div>{count}</div>

<script>
  export let count = 0;
</script>
```

```html
<!-- App.html -->
<Counter count={count}></Counter>

<script>
  import Counter from './Counter.html';

  let count = 20;
</script>
```


# Lifecycle hooks

```html
<script>
	import { onMount, beforeUpdate, afterUpdate, onDestroy } from 'svelte';
</script>
```


# Event modifiers

```html
<div on:click|stopPropagation|preventDefault="{() => foo = !foo}">...</div>
```


# Component events

* Callbacks
* Event dispatching



# Binding callbacks

Callbacks are simply exposed function props

```html
<div>
  <!-- `changed` is an exposed prop -->
	<Select changed="{val => changedVal = val}"></Select>
	<br/>
	Changed to: {changedVal || ''}
</div>

<script>
	import Select from './Select.html';
	
	let changedVal;
</script>
```


# Triggering callbacks

```html
<!-- call `changed` prop -->
<select on:change="{e => changed(e.target.value)}">
	<option>1</option>
	<option>2</option>
</select>

<script>
  // Expose changed prop
  export let changed;
</script>
```


# Event dispatching

```html
<!-- Component.html -->
<script>
  import { createEventDispatch } from 'svelte';

  const dispatch = createEventDispatcher();

  setInternval(() => {
    dispatch('tick', { date: new Date() });
  }, 1000);
</script>
```

```html
<div>
  {newTickdate}
  <!-- e is a CustomEvent instance -->
  <Component on:tick="{e => newTickdate = e.detail.date}"></Component>
</div>

<script>
  let newTickDate;
</script>
```

# Reactivity

* Stores
* Reactive declarations

# Stores


```js
// stores.js
import { writable } from 'svelte/store';

export const user = writable({ });
```

```html
<!-- $ prefix for stores -->
<div><b>User:</b> {$user.name}</div>

<script>
  import { onMount } from 'svelte';
  import { user } from './stores';

  onMount(async () => {
    const data = await (await fetch('/api/users')).json();
    user.$set(data);
  });
</script>
```
 

# Reactive declarations

`$:` the destiny operator

<small>
  Replaces `computed` values. Tells compiler to run statement any time value on
  eight-side changes.
</small>

```html
<p>Counter: {counter}</p>
<p>Double: {dobule}</p>
<button on:click="{counter += 1 }">+1</button>

<script>
  let counter = 1;
  $: double = counter * 2;
</script>
```
# Other things

* Transitions
* Sapper

# Example!

[REPL](https://v3.svelte.technology/repl?version=3.0.0-alpha17&gist=d0898a7fc6b470405630d6a134f632e7)
